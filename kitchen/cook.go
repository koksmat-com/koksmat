package kitchen

import (
	"fmt"
	"os"
	"path"
	"strings"
	"time"

	"github.com/koksmat-com/koksmat/connectors"

	"github.com/spf13/viper"
)

func SetupSessionPath(kitchenPath string) (string, error) {
	sessionPath := path.Join(kitchenPath, ".koksmat", "sessions", time.Now().Format(time.RFC3339Nano))
	err := os.MkdirAll(sessionPath, 0755)
	if err != nil {
		return "", err
	}

	return sessionPath, nil
}
func getEnvironmentFilePath(startPath string, tenantName string) (string, error) {

	if startPath == "" {
		return "", fmt.Errorf("Environment file %s not found", tenantName)
	}

	tenantenvPath := path.Join(startPath, fmt.Sprintf(".env-%s", tenantName))
	if fileExists(tenantenvPath) {
		return tenantenvPath, nil
	}

	envPath := path.Join(startPath, ".env")
	if fileExists(envPath) {
		return envPath, nil
	}
	startPath = path.Dir(startPath)
	return getEnvironmentFilePath(startPath, tenantName)

}

func ReadEnvironmentVariables(filepath string) ([]string, error) {

	if !fileExists(filepath) {
		return nil, nil
	}
	fileContent, err := os.ReadFile(filepath)
	if err != nil {
		return nil, err
	}
	return strings.Split(string(fileContent), "\n"), nil
}

func PowerShellEnvironmentVariables(filepath string) string {
	environment, err := ReadEnvironmentVariables(filepath)
	if err != nil {
		return ""
	}
	powershellEnv := fmt.Sprintf(`
# variables read from %s
`, filepath)
	for _, env := range environment {
		if (env == "") || (strings.HasPrefix(env, "#")) {
			continue
		}
		pairs := strings.Split(env, "=")
		name, values := pairs[0], pairs[1:]

		val := strings.Join(values, "=")
		powershellEnv += fmt.Sprintf(`$env:%s="%s"
`, name, val)
	}
	return powershellEnv
}

func getConnectionsFromMetadata(tenant string, metadata map[string]interface{}, sessionPath string) (string, error) {
	connectScript := ""
	kitchenRoot := viper.GetString("KITCHENROOT")
	// for _, hostConnection := range hostConnections {
	// 	hostConnectionPath := path.Join(sessionPath, hostConnection.Name)
	// 	connectScript += ". " + path.Join(hostConnectionPath, "connect.ps1") + "\n"

	// }

	connectionString := GetMetadataProperty(metadata, "connection", "")

	if connectionString != "" {
		connections := strings.Split(connectionString, ",")
		for _, connection := range connections {
			connection := strings.TrimSpace(connection)
			connectionPath := path.Join(kitchenRoot, ".koksmat", "tenants", tenant, connection)
			if !fileExists(path.Join(connectionPath, "connect.ps1")) {
				return "", fmt.Errorf("Connection %s not found for tenant %s", connection, tenant)
			}
			CreateIfNotExists(path.Join(sessionPath, connection), 0755)
			err := CopyDirectory(connectionPath, path.Join(sessionPath, connection))
			if err != nil {
				return "", err
			}
			connectScript += fmt.Sprintf(`. $PSScriptRoot/%s/connect.ps1 
			`, connection)
		}
	}

	return connectScript, nil
}

func Cook(tenantName string, kitchenName string, stationName string, filename string, environment []string, args ...string) (string, error) {
	// 	Run: run,
	// }
	// return cmd

	//context := connectors.Context{}

	root := viper.GetString("KITCHENROOT")
	kitchenPath := path.Join(root, kitchenName)
	scriptPath := path.Join(root, kitchenName, stationName, filename)

	sessionPath, err := SetupSessionPath(kitchenPath)
	//hostConnections := []HostConnection{}

	if err != nil {
		return "", err

	}

	envPath, err := getEnvironmentFilePath(kitchenPath, tenantName)
	psEnv := ""
	if err == nil {
		psEnv = PowerShellEnvironmentVariables(envPath)

	}
	markdown, _, err := ReadMarkdownFromPowerShell(scriptPath)
	if err != nil {
		return "", err
	}
	_, metadata, err := ParseMarkdown("", markdown)
	if err != nil {
		return "", err
	}
	connectScript, err := getConnectionsFromMetadata(tenantName, metadata, sessionPath)
	if err != nil {
		return "", err
	}

	err = Copy(scriptPath, path.Join(sessionPath, "script.ps1"))
	if err != nil {
		return "", err
	}
	workDir := path.Join(kitchenPath, ".koksmat", "workdir")
	CreateIfNotExists(workDir, 0755)
	fullScript := fmt.Sprintf(`
# --------------------------------------
#  Generated by koksmat
# --------------------------------------
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"
$VerbosePreference = "Continue"
$DebugPreference = "SilentlyContinue"

%s
$ENV:WORKDIR="%s"
Start-Transcript -Path "$PSScriptRoot/transcript.txt" -Append
$result=""
write-host "Running script"
%s
. $PSScriptRoot/script.ps1 %s
Out-File -InputObject $result  -FilePath $PSScriptRoot/output.txt -Encoding:utf8NoBOM
Stop-Transcript

`, psEnv, workDir, connectScript, strings.Join(args, " "))

	os.WriteFile(path.Join(sessionPath, "run.ps1"), []byte(fullScript), 0755)

	_, err = connectors.Execute("code", *&connectors.Options{Dir: sessionPath}, "run.ps1")

	if err != nil {
		return "", err
	}

	return fmt.Sprintf(`
A new sessions has been created for you and the file run.ps1 has been opened in Visual Studio Code.
	
	Session path: %s`, sessionPath), nil

}
